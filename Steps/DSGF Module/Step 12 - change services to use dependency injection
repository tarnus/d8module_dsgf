// Step 12 change services to use dependency injection
/**
Accessing services in objects using dependency injection

Dependency injection is the preferred method for accessing and using services in Drupal 8 and should be used whenever possible.
Rather than calling out to the global services container, services are instead passed as arguments to a constructor or injected via
setter methods. Many of the controller and plugin classes provided by modules in core make use of this pattern and serve as a good resource
for seeing it in action.

The global Drupal class is to be used within global functions. However, Drupal 8's base approach revolves around classes in the form of controllers,
plugins, and so on. The best practice for these is not to call out to the global service container and instead pass in the required services as
arguments to a constructor or inject the needed services via service setter methods.
// Why the fuss
Allows selection from multiple potential interfaces at runtime
Creates highly pluggable systems – easily switch out caching backends for example.
Great for testing – no need to bootstrap or live connections to external services, just give the subsystem a stub implementation. Components can be tested in isolation.
// Symphony definition
The container makes your life easier, is super fast, and emphasizes an architecture that promotes reusable and decoupled code.
Since all core Symfony classes use the container, you'll learn how to extend, configure and use any object in Symfony. In large part,
the service container is the biggest contributor to the speed and extensibility of Symfony.


**/
// edit dsgf controller -- note I used the console generate:controller to build it out for me as far as the service container

<?php
namespace Drupal\dsgf\Controller;
use Drupal\Core\Controller\ControllerBase;
use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
use Drupal\Core\Entity\EntityManagerInterface;
use Drupal\Core\Entity\Query\QueryFactoryInterface;
use Drupal\Core\Session\AccountProxyInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\dsgf\dsgfService;


class dsgfController extends ControllerBase implements ContainerInjectionInterface {

    protected $dsgf_service;

    protected $current_user;

    protected $entity_manager;

    protected $entity_query;

      public function __construct(dsgfService $dsgf_service, AccountProxyInterface $current_user, EntityManagerInterface $entity_manager, QueryFactoryInterface $entity_query){
        $this->dsgf_service=$dsgf_service;
        $this->current_user=$current_user;
        $this->entity_manager=$entity_manager;
        $this->entity_query=$entity_query;

      }



public static function create(ContainerInterface $container){
  return new static(
    $container->get('dsgf.dsgf_service'),
    $container->get('current_user'),
    $container->get('entity.manager'),
    $container->get('entity.query')
  );
}


   $message = $this->config('dsgf.settings')->get('default_text');
      //$message=$this->t("Hello World I am here");

      $account = \Drupal::currentUser();  // another way is \Drupal::service('current_user');
      $account=$this->current_user;
      $name= $account->getUsername();


      // Entity field query
      $query=$this->entity_query->get('node')

                     ->condition('status' , 1);

      $email = \Drupal::config('system.site')->get('mail');
      $nids = $query->execute();

      $node_storage=$this->entity_manager->getStorage('node');
      $node=$node_storage->load( $nids[1]);

      $title=$node->title->value;
      $owner=$node->getOwner()->name->value;;
      kint($owner);
      //kint($title);  //use of devel module... uses kint instead of dpm
      //$dsgfservice = \Drupal::service('dsgf.dsgfservice');
      $tagline = $this->dsgf_service->getTagline();
      kint($tagline);
      return [
        '#theme' => 'hello_page',
        '#message' => $message,
        '#to' => $to,
        '#from' => $from,
        '#email' => $email,
        '#name' => $name,
        '#mytitle'=>$title,
        '#tagline'=>$tagline,
      ];
    }
  }